[{"content":"已收录在 Hugo Blog (你想给你自己整一个静态网站吗?) 已收录在 Git Commands \u0026amp; FAQ git clone 这里有两种方法去使用 git clone\n1. 使用 HTTPS 这是一个克隆自己或者别人在 Github 上的仓库的一个简单的方法\ngit clone HTTPS(https://github.com/example.git)\n2. 使用 SSH 这个方法只能克隆自己已配置好的仓库，或者克隆别人已给你私钥的仓库\ngit clone SSH(git@github.com:example.git)\n给自己的仓库配置 SSH KEY $ ssh-keygen\r#生成 *rsa* 钥匙对\r#第一行选择 rsa 密钥的存储位置，回车即默认地址\r#对于 *Win10用户* 默认位置是/c/User/你的系统用户名/.ssh/id_rsa\r#后面两行输入两次密码，可以直接按两次回车\r$ cd ~/.ssh\r$ cat ~/.ssh/id_rsa.pub\r#查看你公钥的内容\r#将你的公钥复制粘贴到 *github* 或其他代码托管网站\r$ ssh -T git@github.com\r#检查与 Github 的连接\rgit push $ git init\r$ touch .gitignore\r$ vim .gitignore #输入需要被 *git add* 忽略的文件名或文件夹名\r$ git add . #或者 git add \u0026lt;文件名 or 文件夹名\u0026gt;\r$ git commit -m \u0026quot;第一次提交\u0026quot; #-m 选项, 添加此次 commit 的描述\r$ git remote add origin HTTPSorSSH\r#格式: git remote add \u0026lt;远程仓库名\u0026gt; \u0026lt;远程仓库的HTTPS或者SSH\u0026gt;\r$ git push -u origin master #远程仓库名为 origin\r#当前分支为 master\r#-u 选项, 设置默认的远程仓库名\r#下次push时，只需要输入\u0026quot;git push\u0026quot;\r可以输入\u0026quot;git push -h\u0026quot;获取更多帮助\n清空你 GitHub 上某个仓库的内容 $ git rm -rf *\r$ gir commit -m \u0026quot;清空仓库\u0026quot;\r$ git push -f\r","description":"","id":0,"section":"posts","tags":["git","github"],"title":"Git 基本指令 1","uri":"https://iiijesusiii.github.io/Teletubby/zh/posts/git-basic-commands-1/"},{"content":"已收录在 Hugo Blog (你想给你自己整一个静态网站吗?) 什么是 Git? Git是一个免费的开源的分布式版本控制系统工具，能够快速高效地处理从小型到大型项目的所有内容。\n 参考 https://git-scm.com/\n 下载 Git Windows\rLinux\rMacOS\r\rchoco install git.install\r#or\rscoop install git\r 如果你没有下载任何 包管理器 或者 下载器, 比如 choco, scoop 这些\n没关系, 点这下载Git\n\r下列以\u0026rdquo;#\u0026ldquo;开头的指令需要root权限. Ubuntu sudo apt-get install git\nFedora # dnf install git Fedora 22 and later\n# yum install git up to Fedora 21\nGentoo # emerge --ask --verbose dev-vcs/git\nArch Linux # pacman -S git\nopenSUSE # zypper install git\nMageia # urpmi git\nNix/NixOS # nix-env -i git\nFreeBSD # pkg install git\nSolaris 9/10/11 (OpenCSW) # pkgutil -i git\nSolaris 11 Express # pkg install developer/versioning/git\nOpenBSD # pkg_add git\nAlpine $ apk add git\nSlitaz $ tazpkg get-install git\n\rXcode 已经集成了 Git\n安装\u0026quot;Command Line Tools\u0026rdquo;(命令行工具)\r\r\r\r'use strict';\rvar containerId = JSON.parse(\"\\\"ec7d3f4e607b9129\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r 安装 \u0026amp; 配置 Git 如果你现在是 Win10 用户，并且下载的是个 .exe, 可执行文件 的话, 直接双击打开执行，一直点击 \u0026ldquo;next\u0026rdquo; 到安装完毕。\n检查是否安装成功，输入下面指令:\ngit version\n由于 Git 是一个分布式版本控制系统, 所以机器每次执行指令时都需要上报家门。像如下，给你的机器配置 userName 和 emailAddr :\n$ git config --global user.name \u0026quot;你的用户名\u0026quot;\r$ git config --global user.email \u0026quot;你的邮箱地址\u0026quot;\r 注意❗ 这个 git config 的 \u0026ndash;global 参数。使用这个 全局参数 的话，意味着在你机器上的所有 仓库 都会使用相同的配置，当然你也可以为你这些 仓库 配置其他不同的 用户名 和 电子邮箱。\n 查看帮助 Git 的基本指令:\nusage: git [--version] [--help] [-C \u0026lt;path\u0026gt;] [-c name=value]\r[--exec-path[=\u0026lt;path\u0026gt;]] [--html-path] [--man-path] [--info-path]\r[-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\r[--git-dir=\u0026lt;path\u0026gt;] [--work-tree=\u0026lt;path\u0026gt;] [--namespace=\u0026lt;name\u0026gt;]\r\u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;]\rThese are common Git commands used in various situations:\rstart a working area (see also: git help tutorial)\rclone Clone a repository into a new directory\rinit Create an empty Git repository or reinitialize an existing one\rwork on the current change (see also: git help everyday)\radd Add file contents to the index\rmv Move or rename a file, a directory, or a symlink\rreset Reset current HEAD to the specified state\rrm Remove files from the working tree and from the index\rexamine the history and state (see also: git help revisions)\rbisect Use binary search to find the commit that introduced a bug\rgrep Print lines matching a pattern\rlog Show commit logs\rshow Show various types of objects\rstatus Show the working tree status\rgrow, mark and tweak your common history\rbranch List, create, or delete branches\rcheckout Switch branches or restore working tree files\rcommit Record changes to the repository\rdiff Show changes between commits, commit and working tree, etc\rmerge Join two or more development histories together\rrebase Reapply commits on top of another base tip\rtag Create, list, delete or verify a tag object signed with GPG\rcollaborate (see also: git help workflows)\rfetch Download objects and refs from another repository\rpull Fetch from and integrate with another repository or a local branch\rpush Update remote refs along with associated objects\r'git help -a' and 'git help -g' list available subcommands and some\rconcept guides. See 'git help \u0026lt;command\u0026gt;' or 'git help \u0026lt;concept\u0026gt;'\rto read about a specific subcommand or concept.\r还是那句老话, 其实你所需要的就是在命令行中输入\u0026quot;git \u0026ndash;help\u0026rdquo;，然后查阅就行了。\n这里是 我的Git Commands \u0026amp; FAQ\n这里是 Git 官方指南\n已收录在 Hugo Blog ","description":"","id":1,"section":"posts","tags":["git","github"],"title":"安装 Git","uri":"https://iiijesusiii.github.io/Teletubby/zh/posts/install-git/"},{"content":"来白手建站吧，搭建一个hugo静态网站 已收录在 Hugo Blog 为什么选择 Hugo? \u0026amp; 什么是 Hugo? Hugo是一种用Go语言编写的快速的、现代静态网站生成器，为能够更有趣的创建网站而设计。 \u0026hellip;由于浏览网站的频率远远高于编辑网站，因此Hugo旨在为您的网站的终端用户提供最佳的浏览体验，并为网站作者提供理想的写作体验。\n 参考 https://gohugo.io/about/what-is-hugo/\n 简单的说: 快！很快！还简洁!清爽，爽歪歪的爽！\n开始吧! 安装 Hugo  参考官方文档 https://gohugo.io/getting-started/quick-start/\n Windows\rMacOS\rUbuntu\r\rchoco install hugo -confirm #or scoop install hugo \r brew install hugo \r sudo apt install hugo \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"a41cd40346e4d5c0\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r 博主现在用的是 Win10系统,如果你不知道什么是 choco 或者 scoop 没事,直接下载已经编译好的可执行文件 .exe，下载好后直接将 .exe文件拖到命令行中，按回车执行即可，点此下载\n查看安装的Hugo版本:\nhugo version\n我的 Hugo 版本显示 Hugo Static Site Generator v0.66.0/extended windows/amd64 BuildDate: unknown ,emem\u0026hellip;简短就是 extended v0.66.0\n创建静态网站 如果你已经 安装 Git ,就直接在你想要创建网站的文件夹处右击 Git bash here。\n或者你也可以执行 cd 指令到那个文件夹, 然后输入如下指令：\n#format: hugo new site [path] [flags] hugo new site urSiteName 添加主题 首先安装 Git，然后从GitHub下载主题到你创建站点的子目录themes中：\n官方 Hugo 主题\n此博客的主题是 zzo, 你可以在主题作者的Github上 PR 并且给你的主题使用 git submodule 操作。\n如果你不清楚 Git 或者 GitHub 的基操, 请先 看看这 或者查阅 官方文档\ncd urSiteName #到你刚刚创建的文件夹中 git init git submodule add https://balabala.....git themes/themeName 试一手 ❗ 运行示例网站（demo） 从你的根目录（你创建站点的文件夹）中依次 themes/zzo/exampleSite 找到 exampleSite, 并在此目录下执行如下指令：\nhugo server --themesDir ../..\n配置主题并使用 你可以在那些主题页面上看到主题的说明文档，能够知道如何使用。这个 zzo主题 有自己专门的说明文档\n这些文档详细的说明了如何使用其主题，如何客制化主题等详细内容，值得一看。\n添加些内容 在你网站文件夹的根目录输入以下指令\nhugo new posts/hello-hugo.md\n.md 是一种 Markdown 文件, 应该使用 Markdown 语法去编辑, 如果你不知道，这是一本很好上手的 指南\n如果你知道怎么使用的话，那就开始动笔写点东西吧 ;-)\n--- title: \u0026quot;Hello Hugo\u0026quot; date: 2020-03-08T17:35:41+08:00 draft: true ---  ❗这个 .md 文件的 draft 属性 的初始状态是 true.\n 开启 hugo server 1.如果你没有将那文件的 draft 属性 改为 false, 那你也可以在启用 draft 的情况下启动 Hugo server :\nhugo server -D\n如果你的 端口：1313 处于可用状态，它会帮你布置到 http://localhost:1313/ ，否则会自动帮你找一个可用的端口并且搭建好。\n2.如果你已经将要发布的文章更改晚上且将 draft 属性 改为 false 的话。那就简单了，直接敲上：\nhugo server\n然后 按下回车 ，就好了。\n查看帮助 Hugo 的基本指令:\nhugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: config Print the site configuration convert Convert your content to different formats deploy Deploy your site to a Cloud provider. env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content mod Various Hugo Modules helpers. new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026quot;config\u0026quot;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory --ignoreVendor ignores any _vendor directory -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don't sync permission mode of files --noTimes don't sync modification time of files --path-warnings print warnings on duplicate target paths etc. --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed Additional help topics: hugo check Contains some verification checks Use \u0026quot;hugo [command] --help\u0026quot; for more information about a command. 事实上，你只需要在命令行中键入\u0026quot;hugo \u0026ndash;help\u0026rdquo;，然后查阅就行了。\n在下一篇，将 使用Github托管静态网站\n关于搭建 Hugo Blog 的所有 Blog 都收录在 Hugo Blog\n","description":"","id":2,"section":"posts","tags":["hugo"],"title":"你好 Hugo","uri":"https://iiijesusiii.github.io/Teletubby/zh/posts/hello-hugo/"},{"content":"已收录在 Git Commands \u0026amp; FAQ 解决 git pull/push 每次都需要输入密码问题（使用GitHub私有库） git bash到你需要操作的文件夹\ngit config --global credential.helper store\n然后再执行一次 git pull or git push，会提示输入账号和密码，之后就不需要了\n 在本地生成一个文本文件，记录着你刚刚输入的用户名和密码\n 博主现在用的是win10系统，文件在 C:\\Users\\你的系统用户名，叫 .git-credentials 里面内容如下:\nhttps://userName:userPasswd@github.com\n解决 GitHub error fatal: HttpRequestException encountered 执行后（承上所述），如果出现如下错误：\nerror fatal: HttpRequestException encountered\n可能是你的 Git Windows credential Manager 版本较低，需要下载新版本\n如果还是出现同样的错误，可能你需要更新 Git 版本，获取Git最新版本\n 参考 codeshare: How to solve the GitHub error fatal: HttpRequestException encountered\n ","description":"","id":3,"section":"posts","tags":["git","github"],"title":"解决 git pull/push 每次都需要输入密码问题（使用GitHub私有库）","uri":"https://iiijesusiii.github.io/Teletubby/zh/posts/store-github-username-and-passwd/"},{"content":"天线宝宝的博客  这个博客取名源于我和我女朋友，嘻嘻嘻😄\n 主题是 zzo❗\nPowered by Hugo\n","description":"关于","id":4,"section":"","tags":null,"title":"关 于","uri":"https://iiijesusiii.github.io/Teletubby/zh/about/"}]