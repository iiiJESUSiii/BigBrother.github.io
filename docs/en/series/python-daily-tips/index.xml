<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>python daily tips on ðŸ‘ŒTeletubby&#39;s Blog</title>
    <link>https://iiijesusiii.github.io/Teletubby/en/series/python-daily-tips/</link>
    <description>Recent content in python daily tips on ðŸ‘ŒTeletubby&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>oops!@gmail.com (Teletubby)</managingEditor>
    <webMaster>oops!@gmail.com (Teletubby)</webMaster>
    <copyright>Â©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 20 Mar 2020 18:49:36 +0800</lastBuildDate>
    
        <atom:link href="https://iiijesusiii.github.io/Teletubby/en/series/python-daily-tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Python f-string</title>
        <link>https://iiijesusiii.github.io/Teletubby/en/posts/python-f-string/</link>
        <pubDate>Fri, 20 Mar 2020 18:49:36 +0800</pubDate>
        <author>oops!@gmail.com (Teletubby)</author>
        <atom:modified>Fri, 20 Mar 2020 18:49:36 +0800</atom:modified>
        <guid>https://iiijesusiii.github.io/Teletubby/en/posts/python-f-string/</guid>
        <description>f-string f-string also known as formatted string literals, a new string formatting method introduced in Python 3.6. The method is derived from PEP 498 â€“ Literal String Interpolation, is designed to make the operation of formatting string more concise.f-string is a string literal that is prefixed with &amp;lsquo;f&amp;rsquo; or &amp;lsquo;F&#39;(like f&amp;rsquo;xxx&amp;rsquo; or F&amp;rsquo;xxx&amp;rsquo;). These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string</description>
        
        <dc:creator>Teletubby</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
        
        
          
            
              <category>è´°é›¶è´°é›¶é›¶è´°</category>
            
          
        
        
          
            
              <category>python daily tips</category>
            
          
        
      </item>
      
      <item>
        <title>Python collections.Counter Time Complexity</title>
        <link>https://iiijesusiii.github.io/Teletubby/en/posts/python-counter-time-complexity/</link>
        <pubDate>Fri, 20 Mar 2020 13:50:44 +0800</pubDate>
        <author>oops!@gmail.com (Teletubby)</author>
        <atom:modified>Fri, 20 Mar 2020 13:50:44 +0800</atom:modified>
        <guid>https://iiijesusiii.github.io/Teletubby/en/posts/python-counter-time-complexity/</guid>
        <description>The time complexity of collections.Counter() in Python As the source code shows, Counter is just a subclass of dict. Constructing it is O(n), because it has to iterate over the input, but operations on individual elements remain O(1). Note also from that source that it does not keep an order internally, but simply sorts by most common on output, in the ***__repr__*** method. Origin post from: StackOverflow-What is the time</description>
        
        <dc:creator>Teletubby</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
        
        
          
            
              <category>è´°é›¶è´°é›¶é›¶è´°</category>
            
          
        
        
          
            
              <category>python daily tips</category>
            
          
        
      </item>
      
      <item>
        <title>Python Time Complexity</title>
        <link>https://iiijesusiii.github.io/Teletubby/en/posts/python-time-complexity/</link>
        <pubDate>Thu, 19 Mar 2020 15:37:56 +0800</pubDate>
        <author>oops!@gmail.com (Teletubby)</author>
        <atom:modified>Thu, 19 Mar 2020 15:37:56 +0800</atom:modified>
        <guid>https://iiijesusiii.github.io/Teletubby/en/posts/python-time-complexity/</guid>
        <description>Time complexity of Python&amp;rsquo;s built-ins conference Python Wiki This page documents the time-complexity (aka &amp;ldquo;Big O&amp;rdquo; or &amp;ldquo;Big Oh&amp;rdquo;) of various operations in current CPython (last edited 2017-06-05 19:58:18 by JonathanHartley). Other Python implementations (or older or still-under development versions of CPython) may have slightly different performance characteristics. However, it is generally safe to assume that they are not slower by more than a factor of O(log n). Generally, &amp;lsquo;n&amp;rsquo;</description>
        
        <dc:creator>Teletubby</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
        
        
          
            
              <category>è´°é›¶è´°é›¶é›¶è´°</category>
            
          
        
        
          
            
              <category>python daily tips</category>
            
          
        
      </item>
      
      <item>
        <title>Code Runtime in Python3</title>
        <link>https://iiijesusiii.github.io/Teletubby/en/posts/code-runtime-in-python3/</link>
        <pubDate>Thu, 19 Mar 2020 14:50:58 +0800</pubDate>
        <author>oops!@gmail.com (Teletubby)</author>
        <atom:modified>Thu, 19 Mar 2020 14:50:58 +0800</atom:modified>
        <guid>https://iiijesusiii.github.io/Teletubby/en/posts/code-runtime-in-python3/</guid>
        <description>Several ways to get code runtime in Python3 â…  1 2 3 4 5  import timestart =time.time()#code block end = time.time()print(&amp;#39;Running time: %sSeconds&amp;#39;%(end-start))  â…¡ 1 2 3 4 5  import timeitstart=timeit.default_timer()#code block end=timeit.default_timer()print(&amp;#39;Running time: %sSeconds&amp;#39;%(end-start))  â…¢ 1 2 3 4 5  import timestart =time.perf_counter()#code block end = time.perf_counter()print(&amp;#39;Running time: %sSeconds&amp;#39;%(end-start))  â…£ 1 2 3 4 5 6  import timestart =time.</description>
        
        <dc:creator>Teletubby</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
        
        
          
            
              <category>Hello World!</category>
            
          
        
        
          
            
              <category>python daily tips</category>
            
          
        
      </item>
      
      <item>
        <title>Python for-else</title>
        <link>https://iiijesusiii.github.io/Teletubby/en/posts/python-for-else/</link>
        <pubDate>Wed, 18 Mar 2020 23:02:24 +0800</pubDate>
        <author>oops!@gmail.com (Teletubby)</author>
        <atom:modified>Wed, 18 Mar 2020 23:02:24 +0800</atom:modified>
        <guid>https://iiijesusiii.github.io/Teletubby/en/posts/python-for-else/</guid>
        <description>Python for-else &amp;amp; while-else clauses Included in python daily tips for-else Basic structure This is the basic structure of a for-else loop:
1 2 3 4 5 6 7 8  for item in container: if search_something(item): # Found it! process(item) break else: # Didn&amp;#39;t find anything.. not_found_in_container()   Explanation for loops also have an else clause which most of us are unfamiliar with. The else clause executes after the loop completes normally.</description>
        
        <dc:creator>Teletubby</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
        
        
          
            
              <category>Hello World!</category>
            
          
        
        
          
            
              <category>python daily tips</category>
            
          
        
      </item>
      

    
  </channel>
</rss>